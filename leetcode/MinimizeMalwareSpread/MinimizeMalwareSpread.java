/*
In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
Some nodes initial are initially infected by malware.
Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.
This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.
We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).
If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
 

Note:
1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length

idea:
union find with each component size helper array
meanwhile sort initial
47/51 passed
*/

class MinimizeMalwareSpread {
	int[] f;
	int[] size;

	public int minMalwareSpread(int[][] graph, int[] initial) {
		int n = graph.length;
		this.f = new int[n];
		this.size = new int[n];

		// initialization
		for (int i = 0; i < n; i++) {
			f[i] = i;
			size[i] = 1;
		}

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (i != j && graph[i][j] == 1) {
					connect(i, j);
				}
			}
		}

		Arrays.sort(initial);
		for (int node : initial) {
			if (size[node] > 0) {
				return node;
			}
		}

		return -1;
	}

	// union
	public void connect(int a, int b) {
		int fa = find(a);
		int fb = find(b);
		
		if (fa != fb) {
			f[fa] = fb;
			size[fb] += size[fa];
		}
	}

	// compress path after find()
	public int find(int i) {
		int j = i;

		while (j != f[j]) {
			j = f[j];
		}
		// path compress
		while (i != j) {
			int fi = f[i];
			// 把路上的每一个点都指向 j which is the final father
			f[i] = j;
			// 继续沿着 path 走
			i = fi;
		}
		
		return i;
	}
}